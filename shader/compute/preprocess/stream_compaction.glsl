#version 440

// INPUT    UNARY_OP(INPUT) = bool [M]
// INPUT2   scan on local level	   [M]
// INPUT2+X initial buffer         [M]
// OUTPUTX  index or compact buffer[N]
//
// UNARY_OP
//
layout(local_size_x =X)in;

uniform uint bufferSize;

void main(void){
	uint i = gl_GlobalInvocationID.x;
	if(i>=bufferSize){
		return;
	}

	bool should_write = UNARY_OP(INPUT_AT(INPUT,INPUT_VAR,INPUT_SIZE,i,INPUT_NUM_BUFFER,INPUT_INDEX_BUFFER,INPUT_VAR_SIZE));

	uint scanIndex =
		INPUT2_AT(INPUT2,INPUT2_VAR,INPUT2_SIZE,get_scan_local_index(key),INPUT2_NUM_BUFFER,INPUT2_INDEX_BUFFER,INPUT2_VAR_SIZE);

	if(should_write){
#if INPUT3_STREAM_COMPACT_METHOD == INDEX_READ

		OUTPUT_INDEX_AT(OUTPUT_INDEX,OUTPUT_INDEX_VAR,OUTPUT_INDEX_SIZE,sortedIndex,OUTPUT_INDEX_NUM_BUFFER,OUTPUT_INDEX_INDEX_BUFFER,OUTPUT_INDEX_VAR_SIZE) = i;
#else
		for(int var=0; var<OUTPUT_VAR_SIZE;var++){
			OUTPUT_AT(OUTPUT,var,OUTPUT_SIZE,sortedIndex,OUTPUT_NUM_BUFFER,OUTPUT_INDEX_BUFFER,OUTPUT_VAR_SIZE) = INPUT3_AT(INPUT3,var,INPUT3_SIZE,i,INPUT3_NUM_BUFFER,INPUT3_INDEX_BUFFER,INPUT3_VAR_SIZE);
		}
#ifdef OUTPUT2
		for(int var=0; var<OUTPUT2_VAR_SIZE;var++){
			OUTPUT2_AT(OUTPUT2,var,OUTPUT2_SIZE,sortedIndex,OUTPUT2_NUM_BUFFER,OUTPUT2_INDEX_BUFFER,OUTPUT2_VAR_SIZE) = INPUT4_AT(INPUT4,var,INPUT4_SIZE,i,INPUT4_NUM_BUFFER,INPUT4_INDEX_BUFFER,INPUT4_VAR_SIZE);
		}
#endif

#ifdef OUTPUT3
		for(int var=0; var<OUTPUT3_VAR_SIZE;var++){
			OUTPUT3_AT(OUTPUT3,var,OUTPUT3_SIZE,sortedIndex,OUTPUT3_NUM_BUFFER,OUTPUT3_INDEX_BUFFER,OUTPUT3_VAR_SIZE) = INPUT5_AT(INPUT5,var,INPUT5_SIZE,i,INPUT5_NUM_BUFFER,INPUT5_INDEX_BUFFER,INPUT5_VAR_SIZE);
#endif
#endif
		}
	}
}
